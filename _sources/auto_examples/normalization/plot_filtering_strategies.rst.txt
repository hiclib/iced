
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/normalization/plot_filtering_strategies.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_normalization_plot_filtering_strategies.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_normalization_plot_filtering_strategies.py:


==============================
Different filtering strategies
==============================

`iced` provides different filtering strategies. In short:

    - filtering rows and columns that are the most sparse.
    - filtering of the smallest x% rows and columns in terms of interactions
    - filtering of the smallest x% **interacting** rows and columns

.. GENERATED FROM PYTHON SOURCE LINES 13-47



.. image:: /auto_examples/normalization/images/sphx_glr_plot_filtering_strategies_001.png
    :alt: Filtering 4% sparsest loci, Filtering 4% smallest interacting loci, Filtering 4% smallest interacting loci  + all non-interacting loci
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/travis/build/hiclib/iced/iced/io/_io_pandas.py:56: UserWarning: Attempting to guess whether counts are 0 or 1 based
      warnings.warn(

    Text(0.5, 1.0, 'Filtering 4% smallest interacting loci\n + all non-interacting loci')





|

.. code-block:: default

    import matplotlib.pyplot as plt
    from matplotlib import colors

    from iced import datasets
    from iced import filter


    # Loading a sample dataset
    counts, lengths = datasets.load_sample_yeast()


    fig, axes = plt.subplots(ncols=3, figsize=(12, 4))
    counts_1 = filter.filter_low_counts(counts, lengths=lengths, percentage=0.04)
    counts_2 = filter.filter_low_counts(counts, lengths=lengths, percentage=0.04,
                                        sparsity=False)
    counts_3 = filter.filter_low_counts(counts, lengths=lengths, percentage=0.04,
                                        sparsity=False, remove_all_zeros_loci=True)


    # Plotting the results using matplotlib
    chromosomes = ["I", "II", "III", "IV", "V", "VI"]


    for ax, c in zip(axes, [counts_1, counts_2, counts_3]):
        ax.imshow(c, cmap="Blues", norm=colors.SymLogNorm(1),
                  extent=(0, len(counts), 0, len(counts)))

        [ax.axhline(i, linewidth=1, color="#000000") for i in lengths.cumsum()]
        [ax.axvline(i, linewidth=1, color="#000000") for i in lengths.cumsum()]

    axes[0].set_title("Filtering 4% sparsest loci")
    axes[1].set_title("Filtering 4% smallest interacting loci")
    axes[2].set_title("Filtering 4% smallest interacting loci\n + all "
                      "non-interacting loci")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.370 seconds)


.. _sphx_glr_download_auto_examples_normalization_plot_filtering_strategies.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_filtering_strategies.py <plot_filtering_strategies.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_filtering_strategies.ipynb <plot_filtering_strategies.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
